from __future__ import annotations
import bpy.types
import bpy.props
from typing import Any,Callable,Dict,Generic,List,Literal,Optional,Set,Tuple,TypeVar,Union
from mathutils import Matrix,Vector
T=TypeVar('T')
class bpy_struct:
 id_data:Optional['ID']
 def as_pointer(self)->int:...
 def driver_add(self,path:str,index:int=-1)->Union['FCurve',List['FCurve']]:...
 def driver_remove(self,path:str,index:int=-1)->bool:...
 def get(self,key:str,default:Any=None)->Any:...
 def id_properties_clear(self)->None:...
 def id_properties_ensure(self)->'IDPropertyGroup':...
 def id_properties_ui(self,key:str)->'IDPropertyUIManager':...
 def is_property_hidden(self,property:str)->bool:...
 def is_property_overridable_library(self,property:str)->bool:...
 def is_property_readonly(self,property:str)->bool:...
 def is_property_set(self,property:str,ghost:bool=True)->bool:...
 def items(self)->'IDPropertyGroupViewItems':...
 def keyframe_delete(self,data_path:str,index:int=-1,frame:float=0.0,group:str='')->bool:...
 def keyframe_insert(self,data_path:str,index:int=-1,frame:float=0.0,group:str='',options:Set[str]=set(),keytype:str='KEYFRAME')->bool:...
 def keys(self)->'IDPropertyGroupViewKeys':...
 def path_from_id(self,property:str='')->str:...
 def path_resolve(self,path:str,coerce:bool=True)->Union[Any,'bpy_prop']:...
 def pop(self,key:str,default:Any=None)->Any:...
 def property_overridable_library_set(self,property:str,overridable:bool)->bool:...
 def property_unset(self,property:str)->None:...
 def rna_ancestors(self)->List['bpy_struct']:...
 def type_recast(self)->'bpy_struct':...
 def values(self)->List[Any]:...
class Context(bpy_struct):
 area:'Area'
 asset:'AssetRepresentation'
 blend_data:'BlendData'
 collection:'Collection'
 engine:str
 gizmo_group:'GizmoGroup'
 layer_collection:'LayerCollection'
 mode:str
 preferences:'Preferences'
 region:'Region'
 region_data:'RegionView3D'
 region_popup:'Region'
 scene:'Scene'
 screen:'Screen'
 space_data:Optional['Space']
 tool_settings:'ToolSettings'
 view_layer:'ViewLayer'
 window:'Window'
 window_manager:'WindowManager'
 workspace:'WorkSpace'
 selected_objects:List['Object']
 active_object:Optional['Object']
 def evaluated_depsgraph_get(self)->'Depsgraph':...
 def copy(self)->Dict[str,Any]:...
 def path_resolve(self,path:str,coerce:bool=True)->Any:...
 @classmethod
 def bl_rna_get_subclass(cls,id:str,default:Optional['Struct']=None)->'Struct':...
 @classmethod
 def bl_rna_get_subclass_py(cls,id:str,default:Optional[type]=None)->type:...
 def temp_override(self,**kwargs)->Any:...
class ID(bpy_struct):
 asset_data:'AssetMetaData'
 id_type:str
 is_editable:bool
 is_embedded_data:bool
 is_evaluated:bool
 is_library_indirect:bool
 is_missing:bool
 is_runtime_data:bool
 library:'Library'|None
 library_weak_reference:'LibraryWeakReference'|None
 name:str
 name_full:str
 original:'ID'|None
 override_library:'IDOverrideLibrary'|None
 preview:'ImagePreview'|None
 session_uid:int
 tag:bool
 use_extra_user:bool
 use_fake_user:bool
 users:int
 def animation_data_clear(self)->None:...
 def animation_data_create(self)->'AnimData':...
 def asset_clear(self)->None:...
 def asset_generate_preview(self)->None:...
 def asset_mark(self)->None:...
 def copy(self)->'ID':...
 def make_local(self,lib_override:bool=False,clear_proxy:bool=False)->'ID':...
 def override_hierarchy_create(self,scene:'Scene',view_layer:'ViewLayer',reference:Optional['ID']=None,do_fully_editable:bool=False)->'Collection':...
 def override_template_create(self)->None:...
 def user_clear(self)->None:...
 def user_of_id(self,id:'ID')->int:...
 def user_remap(self,new_id:'ID')->None:...
 @classmethod
 def bl_rna_get_subclass(cls,id:str,default:Optional['Struct']=None)->'Struct':...
 @classmethod
 def bl_rna_get_subclass_py(cls,id:str,default:Optional[type]=None)->type:...
class Object(ID):
 type:Literal['MESH','CURVE','SURFACE','META','FONT','CURVES','POINTCLOUD','VOLUME','GREASEPENCIL','ARMATURE','LATTICE','EMPTY','LIGHT','LIGHT_PROBE','CAMERA','SPEAKER']
 matrix_world:Matrix
 @property
 def location(self)->Vector:...
 @location.setter
 def location(self,value:Union[Vector,tuple[float,float,float]])->None:...
 data:Optional[ID]
 @property
 def rotation_euler(self)->'Euler':...
 @rotation_euler.setter
 def rotation_euler(self,value:Union['Euler',tuple[float,float,float]])->None:...
 def to_mesh(self,preserve_all_data_layers:bool=False,depsgraph:Optional['Depsgraph']=None)->'Mesh':...
 def to_mesh_clear(self)->None:...
 def select_set(self,state:bool)->None:...
class PropertyGroup(bpy_struct):
 name:str
 @classmethod
 def bl_rna_get_subclass(cls,id:str)->'Struct':...
 @classmethod
 def bl_rna_get_subclass_py(cls,id:str)->type:...
class Operator(bpy_struct):
 bl_cursor_pending:str
 bl_description:str
 bl_idname:str
 bl_label:str
 bl_options:Set[str]
 bl_translation_context:str
 bl_undo_group:str
 has_reports:bool
 layout:'UILayout'
 macros:'bpy_prop_collection'['Macro']
 name:str
 options:'OperatorOptions'
 properties:'OperatorProperties'
 bl_property:str
 def report(self,type:Set[str],message:str)->None:...
 def is_repeat(self)->bool:...
 @classmethod
 def poll(cls,context:'Context')->bool:...
 def execute(self,context:'Context')->Set[str]:...
 def check(self,context:'Context')->bool:...
 def invoke(self,context:'Context',event:'Event')->Set[str]:...
 def modal(self,context:'Context',event:'Event')->Set[str]:...
 def draw(self,context:'Context')->None:...
 def cancel(self,context:'Context')->None:...
class Panel(bpy_struct):
 bl_category:str
 bl_context:str
 bl_description:str
 bl_idname:str
 bl_label:str
 bl_options:Set[str]
 bl_order:int
 bl_owner_id:str
 bl_parent_id:str
 bl_region_type:str
 bl_space_type:str
 bl_translation_context:str
 bl_ui_units_x:int
 custom_data:'Constraint'
 is_popover:bool
 layout:'UILayout'
 text:str
 use_pin:bool
 @classmethod
 def poll(cls,context:'Context')->bool:...
 def draw(self,context:'Context')->None:...
 def draw_header(self,context:'Context')->None:...
 def draw_header_preset(self,context:'Context')->None:...
 def append(self,draw_func:Callable)->None:...
 def prepend(self,draw_func:Callable)->None:...
 def remove(self,draw_func:Callable)->None:...
class UIList(bpy_struct):
 bitflag_filter_item:int
 bitflag_item_never_show:int
 bl_idname:str
 filter_name:str
 layout_type:str
 list_id:str
 use_filter_invert:bool
 use_filter_show:bool
 use_filter_sort_alpha:bool
 use_filter_sort_lock:bool
 use_filter_sort_reverse:bool
 def draw_item(self,context:'Context',layout:'UILayout',data:Any,item:Any,icon:int,active_data:Any,active_propname:str,index:int,flt_flag:int)->None:...
 def draw_filter(self,context:'Context',layout:'UILayout')->None:...
 def filter_items(self,context:'Context',data:Any,property:str)->Tuple[List[int],List[int]]:...
class UILayout(bpy_struct):
 active:bool
 alignment:str
 operator_context:str
 scale_x:float
 scale_y:float
 use_property_decorate:bool
 use_property_split:bool
 def prop(self,data:bpy_struct,property:str,text:str="",text_ctxt:str="",translate:bool=True,icon:str='NONE',expand:bool=False,slider:bool=False,toggle:int=-1,icon_only:bool=False,event:bool=False,full_event:bool=False,emboss:bool=True,index:int=-1,icon_value:int=0,invert_checkbox:bool=False)->None:...
 def row(self,align:bool=False,heading:bool=False)->'UILayout':...
 def column(self,align:bool=False,heading:bool=False)->'UILayout':...
 def box(self)->'UILayout':...
 def label(self,text:str="",text_ctxt:str="",translate:bool=True,icon:str='NONE',icon_value:int=0)->None:...
 def separator(self)->None:...
 def operator(self,operator:str,text:str="",text_ctxt:str="",translate:bool=True,icon:str='NONE',emboss:bool=True,depress:bool=False,icon_value:int=0)->'OperatorProperties':...
 def template_list(self,listtype_name:str,list_id:str,dataptr:Any,propname:str,active_dataptr:Any,active_propname:str,rows:int=5,maxrows:int=5,type:Literal['DEFAULT','COMPACT','GRID']='DEFAULT',columns:int=9,sort_reverse:bool=False,sort_lock:bool=False)->None:...
class Scene(ID):
 render:'RenderSettings'
 ortho_scale_219_settings:Optional['OrthoScale219Settings']
class RenderSettings(bpy_struct):
 resolution_x:int
 resolution_y:int
 resolution_percentage:int
class bpy_prop_collection(Generic[T],bpy_struct):
 def clear(self)->None:...
 def __getitem__(self,key:int)->T:...
 def add(self)->T:...
 def remove(self,index:int)->None:...
 def __len__(self)->int:...
 def get(self,key:str,default:Optional[T]=None)->Optional[T]:...
class OperatorProperties(bpy_struct):
 @classmethod
 def bl_rna_get_subclass(cls,id:str,default:Optional['Struct']=None)->'Struct':...
 @classmethod
 def bl_rna_get_subclass_py(cls,id:str,default:Optional[type]=None)->type:...
class Depsgraph(bpy_struct):
 objects:bpy_prop_collection['Object']
class Mesh(ID):
 vertices:bpy_prop_collection['MeshVertex']
class MeshVertex(bpy_struct):
 co:Vector
class Camera(ID):
 type:Literal['PERSP','ORTHO','PANO']
 ortho_scale:float
 shift_x:float
 shift_y:float
 clip_start:float
 clip_end:float
class BlendData(bpy_struct):
 objects:'BlendDataObjects'
 cameras:'BlendDataCameras'
 meshes:'BlendDataMeshes'
class BlendDataObjects(bpy_prop_collection['Object']):
 def new(self,name:str,object_data:Optional[ID]=None)->'Object':...
class Collection(ID):
 objects:'CollectionObjects'
class CollectionObjects(bpy_prop_collection['Object']):
 def link(self,object:'Object')->None:...
class BlendDataMeshes(bpy_prop_collection['Mesh']):
 def new(self,name:str)->'Mesh':...
class BlendDataCameras(bpy_prop_collection['Camera']):
 def new(self,name:str)->'Camera':...
class Euler(bpy_struct):
 def __init__(self,angles:tuple[float,float,float])->None:...